Gfg problem
Q. Find the Missing and repating Numbers

Given an unsorted array Arr of size N of positive integers.
One number 'A' from set {1, 2, â€¦N} is missing and one number 'B' occurs twice in array.
Find these two numbers.

Example 1:

Input:
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.
Example 2:

Input:
N = 3
Arr[] = {1, 3, 3}
Output: 3 2
Explanation: Repeating number is 3 and 
smallest positive missing number is 2.

        Method 1 (Use Sorting)
Approach: 
Sort the input array.
Traverse the array and check for missing and repeating.
Time Complexity: O(nLogn)

Method 2 (Use elements as Index and mark the visited places)
Approach: 
Traverse the array.
While traversing, use the absolute value of every element as an index
and make the value at this index as negative to mark it visited. 
If something is already marked negative then this is the repeating element.
To find missing, traverse the array again and look for a positive value.

Let's Code-------------------------------------------- Method 2 ----------------------------

class Solution{
public:
    int *findTwoElement(int *arr, int n) {
        // code here
        int x,y;
        for(int i=0;i<n;i++){
            if(arr[abs(arr[i])-1]<0){
                x = abs(arr[i]);
            }
            else{
                arr[abs(arr[i])-1] = -arr[abs(arr[i])-1];
            }
        }
        for(int i=0;i<n;i++){
            if(arr[i]>0){
                y = i+1;
                break;
            }
        }
        int *res = new int[2];
        res[0] = x;
        res[1] = y;
        return res;
    }
};